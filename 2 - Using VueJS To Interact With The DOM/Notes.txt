                                                        NOTES
                                                        -----

Understanding VueJS Templates
    - Note: the "{{ }}" syntax is called Interpolation or String Interpolation
    - When we create a Vue instance, it connects our code in Vue with our HTML code
    - It's important to note that Vue at runtime does not use the HTML code or add its Vue commands to the HTML code
        - You can see this if you inspect our "Hello World" code; it looks like this -> <p>Hello World!</p>
            - It gives no indication of any Vue magic happening, no curly braces, etc.
        - Process
            - Vue creates a template based on our HTML code
            - Vue then stores that internally
            - Vue then uses that template to generate the real HTML code, which is then rendered as the DOM
        - This is important because it shows us that between our html code and the browser, there is another layer (Vue) that takes
          our code and converts the templates to html code before the real code is put into the browser. That's why we're able to use
          templates the way we do

How the VueJS Template Syntax and Instance Work Together  
    - So doing what we did before, we were able to output the title in HTML through the title property in data
    - In the HTML, we didn't have to type this.title or data.title; we could just reference title
    - Vue gives us access to everything in the data object just like that
        - This is important because we don't have to manually save our Vue instance, or put in some variable or something
        - Behind the scenes, we can access all properties in the data object automagically
    -  It's not just the data object though - we have access to the methods object as well!
        - See Example 1  // (displays Hello! in browser)
        - When Vue renders our template, it will parse and call that method accordingly
            - It has to be able to be converted to a string, meaning no objects or anything fancy; If the function can turn it to a string, you can call that function in the template

Accessing Data in the Vue Instance
    - In our sayHello method, normally if we wanted to instead return the title located in data, we couldn't do that-it wouldn't have access
        - With Vue however, you can!
        - Vue behind the scenes proxies the data and methods object, which allows us to do something like "return this.title"
        - In the Javascript, if you're going to call a property, you DO need to use "this.<whatever>", while in the HTML you don't

Binding to Attributes
    - Let's say we wanted to display a link to Google's page after saying Hello
        - In the JS
            - data: {
                title: "Hello World!",
                link: "http://google.com"
            } 
        - In the HTML
            - <p>{{ sayHello() }} - <a href="{{ link }}">Google</a></p>      

    - What do you think happens?
        - If you try running this in the browser, and try clicking on the Google link, you get an error
            - Looking at the address bar, you see "%7B%7B%20link%20%7D%7D"
            - The <a></a> tag is trying to parse your link and it can't do it
            - VueJS doesn't work like that; You CANNOT use the curly braces syntax inside ANY html elements/attributes  
    - So what if you wanted to do this anyways? To dynamically bind the link?
        - You can actually do this!
        - We use a directive that comes with VueJS called "v-bind"
            - This tells Vue to not treat this attribute like you would normally in html, but instead bind it to some data that exists w/in my Vue Instance
            - Usage -> v-bind:<attribute_we_want_bound>
                - See Example 2
                    - NOTE: Once we use the v-bind directive, we're already in VueJS land; We don't need to use the curly brace syntax to get the like property. We can type link normally

Understanding and Using Directives
    - Directive: An instruction you place in your code
    - Vue comes with some prebuilt directives already
    - You generally pass arguments into directives by using a colon (Ex: v-bind:href=...)
    - Directives allow you to dynamically bind data to html elements (which you normally couldn't do)

Disable Re-Rendering with v-once
    - Let's enhance the app a little bit

        - <div id="app">
            <h1>{{ title }}</h1> // title = "Hello!"
            <p>{{ sayHello() }} - <a v-bind:href="link">Google</a></p> // displays = "Hello! - Google" (Hello comes from title)
        </div>

        - data: {
            title: "Hello World!",
            link: "http://google.com"
          },
          methods: {
          sayHello: function() {
              this.title = 'Hello!';
              return this.title;
            }
          }

            - NOTE: Remember that ALL usages of "title" get re-rendered once the property changes!
                - That's why both the <h1> and the <p> say "Hello!"  
            - What happens if we wanted to have it so that "title" = the first value we set it to, instead of the overridden one?
                - In other words, we want the h1 to be "Hello World!" while the second title text is "Hello! - Google"
                - We can do this, with another Vue directive called "v-once"
                    - When this is used on an element, it means that the element gets rendered only once
                        - The value of the element does not get overridden, even if the property changes later on
                    - Now we have
                        - <div id="app">
                            <h1 v-once>{{ title }}</h1> // displays = "Hello World!"
                            <p>{{ sayHello() }} - <a v-bind:href="link">Google</a></p> // displays = "Hello! - Google"
                          </div>

How To Output Raw HTML
    - Let's enhance the app even more
    - In the data object, we now add -> finishedLink: '<a href="http://google.com">Google</a>'
    - In the div, we add -> <p>{{ finishedLink }}</p>
    - What do you think it'll look like when we run it?
        - It displays <a href="http://google.com">Google</a> as text
            - We don't see a rendered HTML element, instead we see it in text form
            - This is the default behavior of VueJS, and this is a good thing!
                - It escapes HTML, meaning it doesn't render HTML elements, only text
                    - This ensures that we don't fall victim to something like Cross-Side Scripting attacks 
                - Most of the time, this is what you want
            - On the other hand, if you have HTML content, and you know where the source is coming from/you've sanitized the output, then there is a way to render
              the HTML code as an HTML element, and not the text
                - Ex: You have a blog post that let's you edit in it
                - Instead of doing string interpolation {{ }} we can use another Vue directive -> v-html
                    - This allows you to pass the property you want to use as html code
                        - so <p>{{ finishedLink }}</p> now becomes -> <p v-html="finishedLink"></p>
                    - NOTE: Remember that this DOES expose you to Cross-Side Scripting attacks, especially if it's being used where the user is entering information client-Side
                        - You have no control what they enter, and they could inject anything they want

Listening to Events
    - We have a button and a counter, and want to hook it up so that when we click the button, the counter increases
    - We'll use v-on
        - Unlike how v-bind let's us bind to an element and then pass data to it, v-on does the reverse
            - We bind to, or better yet, LISTEN to receive something from our template
                - What do we listen for? An event!
                    - The name of the event is then used as the argument for v-on (Ex: v-on:click)
        - See Example 3

Getting Event Data from the Event Object







                                            EXAMPLES
                                            --------

Example 1 - Using the method Object
---------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>VueJS</title>
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>    
</head>
<body>
    <div id="app">
        <p>{{ sayHello() }}</p>
    </div>

    <script>
        new Vue({
            el: "#app",
            data: {
                title: "Hello World!"
            },
            methods: {
                sayHello: function() {
                    return 'Hello!';
                }
            }
        });
    </script>
</body>
</html>


Example 2 - Binding an Attribute
---------
<body>
    <div id="app">
        <p>{{ sayHello() }} - <a v-bind:href="link">Google</a></p>
    </div>

    <script>
        new Vue({
            el: "#app",
            data: {
                title: "Hello World!",
                link: "http://google.com"
            },
            methods: {
                sayHello: function() {
                    return 'Hello!';
                }
            }
        });
    </script>
</body>


Example 3 - Listening for an Event
---------
<body>
    <div id="app">
        <button v-on:click="increase">Click Me!</button>
        <p>{{ counter }}</p>
    </div>

    <script>
        new Vue({
            el: "#app",
            data: {
                counter: 0
            },
            methods: {
                increase: function() {
                    this.counter++;
                }
            }
        });
    </script>
</body>


Example 4 - 
---------

